---
- name: Instruqt a4mw-eap-sso
  hosts: localhost
  become: false
  gather_facts: false

  collections:
    - awx.awx 

  tasks:
    - name: Add EE to Controller
      awx.awx.execution_environment:
        name: "servicenow-ee"
        image: "quay.io/acme_corp/servicenow-ee:latest"
      tags:
        - setup-ee

    - name: Create Hub Credentials for the lab
      awx.awx.credential:
        credential_type: Ansible Galaxy/Automation Hub API Token
        name: hub-credentials
        organization: Default
        inputs:
          url: https://cloud.redhat.com/api/automation-hub/
          auth_url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
          token: "{{ lookup('file', 'hub_token' ) }}"
      tags:
        - setup-env

    - name: Create machine Credentials for the lab
      awx.awx.credential:
        name: lab-credentials
        credential_type: Machine
        organization: Default
        inputs:
          username: rhel
          ssh_key_data: "{{ lookup('file', '/home/rhel/.ssh/id_rsa' ) }}"
      tags:
        - setup-env

    - name: Create source code Credentials for the lab
      awx.awx.credential:
        name: git-credentials
        credential_type: Source Control
        organization: Default
        inputs:
          username: rhel
          ssh_key_data: "{{ lookup('file', '/home/rhel/.ssh/id_rsa' ) }}"
      tags:
        - setup-env

    - name: Update default organization to pull from hub
      organization:
        name: "Default"
        state: present
        galaxy_credentials:
          - Ansible Galaxy
          - hub-credentials
      tags:
        - setup-env

    - name: Clone project directory
      become: true
      become_user: rhel    
      ansible.builtin.git:
        dest: /home/rhel/eap-sso
        repo: 'https://github.com/ansible-middleware/instruqt-a4mw-eap-sso.git'
        depth: 1
      tags:
        - setup-env

    - name: "Add certificates to git"
      become: true
      become_user: rhel
      ansible.builtin.shell: |
        git config --global user.email "rhel@a4mw.instruqt.local"
        git config --global user.name "A4MW Instruqt student"
        mv /home/rhel/jbcs-eap-key.pem /home/rhel/eap-sso/roles/certificates/files/jbcs-eap.key
        mv /home/rhel/jbcs-eap.pem /home/rhel/eap-sso/roles/certificates/files/jbcs-eap.crt
        git add -A && git commit -m "Add certificates"
      args:
        chdir: /home/rhel/eap-sso
      ignore_errors: true
      register: output
      failed_when: >
        output.msg != "" and
        ("error" in output.msg or
        "conflict" in output.msg or
        "Errno" in output.msg or
        "fatal" in output.msg or
        (output.stdout != "" and
        "nothing to commit, working tree clean" not in output.stdout) or
        (output.stderr != ""))
      tags:
        - setup-env

    - name: Create project
      awx.awx.project:
        name: eap-sso
        organization: Default
        state: present
        scm_type: git
        scm_url: 'rhel@control:eap-sso'
        scm_branch: main
        scm_refspec: '+refs/heads/*:refs/remotes/origin/*'
        scm_update_on_launch: true
        update_project: false
        wait: true
        credential: git-credentials
        timeout: 0
      tags:
        - setup-env
      retries: 5
      delay: 5
      register: result
      until: result is not failed

    - name: Create an inventory in automation controller
      awx.awx.inventory:
        name: eap-sso
        organization: Default
      tags:
        - setup-env

    - name: Add the project inventory source
      awx.awx.inventory_source:
        name: "eap-sso-source"
        description: Source for inventory
        inventory: eap-sso
        credential: git-credentials
        overwrite: True
        update_on_launch: True
        organization: Default
        source: scm
        source_project: eap-sso
        source_path: inventory/inventory
      tags:
        - setup-env

    - name: Launch a Project with extra_vars without waiting
      awx.awx.project_update:
        project: eap-sso
        wait: False
      retries: 5
      delay: 5
      register: result
      until: result is not failed
      tags:
        - update-project

    # this should trigger update_project so the above is not in prepare-env
    - name: Update inventory source
      inventory_source_update:
        name: "eap-sso-source"
        inventory: eap-sso
        organization: Default
        wait: True
      tags:
        - prepare-env

    - name: Create deploy template
      awx.awx.job_template:
        name: eap-sso-deploy
        organization: Default
        state: present
        inventory: eap-sso
        playbook: deploy.yml
        project: eap-sso
        credential: lab-credentials
        survey_enabled: yes
        survey_spec: "{{ lookup('file', 'deploy_survey.json') }}"
      tags:
        - prepare-env
      retries: 10
      delay: 10
      register: result
      until: result is not failed

    - name: Delete demo template
      awx.awx.job_template:
        name: 'Demo Job Template'
        state: absent
        organization: Default
      tags:
        - setup-env

    - name: Delete demo inventory
      awx.awx.inventory:
        name: 'Demo Inventory'
        state: absent
        organization: Default
      tags:
        - setup-env

    - name: Delete demo project
      awx.awx.project:
        name: 'Demo Project'
        state: absent
        organization: Default
      tags:
        - setup-env

    - name: Delete demo credential
      awx.awx.credential:
        name: 'Demo Credential'
        credential_type: Machine
        state: absent
      tags:
        - setup-env


#########################################
####        CHECK MODE
#########################################


    - name: Check inventory 
      awx.awx.inventory:
        name: eap-sso
        organization: Default
        kind: ""
      check_mode: true
      register: check_inv
      failed_when: check_inv.changed
      tags:
        - check-inventory
        - check-all

    - name: Check sso group
      awx.awx.group:
        name: sso
        inventory: eap-sso
        hosts:
          - sso1
          - sso2
      check_mode: true
      register: check_inv_group
      failed_when: check_inv_group.changed
      tags:
        - check-inventory
        - check-all

    - name: Check eap group
      awx.awx.group:
        name: eap
        inventory: eap-sso
        hosts:
          - jbcs-eap
      check_mode: true
      register: check_inv_group
      failed_when: check_inv_group.changed
      tags:
        - check-inventory
        - check-all


#########################################
## execution checks // apache service, package, html
#########################################


## check node1 and node2 individually to register html output?
    - name: Check that apache is working in node1
      ansible.builtin.uri:
        url: http://node1
        return_content: true
      register: apache_node1
      until: apache_node1.status == 200
      retries: 720 # 720 * 5 seconds = 1hour (60*60/5)
      delay: 5 # Every 5 seconds
      failed_when: "'webserver' not in apache_node1.content"
      tags:
        - check-apache-uri
        - check-apache

    - name: Check that apache is working in node2
      ansible.builtin.uri:
        url: http://node2
        return_content: true
      register: apache_node2
      until: apache_node2.status == 200
      retries: 720 # 720 * 5 seconds = 1hour (60*60/5)
      delay: 5 # Every 5 seconds
      failed_when: "'webserver' not in apache_node2.content"
      tags:
        - check-apache-uri
        - check-apache



## TODO: delegate to workaround host, need to move to another playbook/hosts.
    - name: Check httpd service is started
      ansible.builtin.service:
        name: httpd
        state: started
        enabled: true
      delegate_to: "{{ item }}"
      loop:
        - node1
        - node2
      check_mode: true
      tags:
        - check-apache-service
        - check-apache

    - name: Check the Apache Job Template launches successfully
      awx.awx.job_launch:
        job_template: "Install Apache"
        wait: true
        timeout: 120
      #check_mode: true
      ignore_errors: true
      register: job_apache
      tags:
        - check-jt_apache

    - name: Verify if the apache job was successful
      ansible.builtin.assert:
        that: job_apache.status == 'successful'
        success_msg: "The job was successful."
        fail_msg: "The job failed."
      tags:
        - check-jt_apache